/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package act3_trimestre1_aad;

import act3_trimestre1_aad.*;
import java.util.List;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;


/**
 *
 * @author MEDAC
 */
public class InterfazHibernate extends javax.swing.JFrame {
    // variable que almacena consulta 
    String hql;
    // variables en las que se guardan la consulta y la clase sobre la que se realiza esta
    Query<Alumnos> c_al;
    Query<Asignaturas> c_as;
    Query<Aula> c_au;
    Query<Matriculas> c_mat;
    Query<Módulos> c_mod;
    Query<Profesor> c_prof;
    Query<Taquillas> c_taq;
    Query<sala_profesores> c_sala;
    // icono de JOptionPane
    Icon IconoInsertar = new ImageIcon(getClass().getResource("/Iconos/insertar.png"));
    //almacenaje de nombre de clases, para establecer como botones
    Object[] opciones = {"Alumnos", "Asignaturas", "Aula", "Matriculas", "Modulos", "Profesor", "Taquillas", "Sala_Profesores"};
    
    public InterfazHibernate() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btn_salir = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        lbl_resultado = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 204, 153));

        jLabel1.setBackground(new java.awt.Color(204, 102, 0));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ACT 3 TRIMESTRE 1: HIBERNATE");
        jLabel1.setOpaque(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 740, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(255, 204, 153));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 51, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("MENÚ");

        btn_salir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/cerrar-sesion.png"))); // NOI18N
        btn_salir.setText("SALIR");
        btn_salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_salirActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("_________________________________________________________________________________________________________________________");

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/proximo.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Delete");

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/proximo.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/proximo.png"))); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Update");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Insert");

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/proximo.png"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Select (where)");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel3))
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(61, 61, 61)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(34, 34, 34))
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(31, 31, 31))
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(63, 63, 63)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(51, 51, 51))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_salir)
                .addGap(329, 329, 329))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(333, 333, 333)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(btn_salir)
                .addGap(17, 17, 17))
        );

        jPanel3.setBackground(new java.awt.Color(204, 102, 0));

        lbl_resultado.setBackground(new java.awt.Color(255, 255, 255));
        lbl_resultado.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_resultado.setOpaque(true);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_resultado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbl_resultado, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_salirActionPerformed
        //metodo salir de la interfaz
        dispose();
    }//GEN-LAST:event_btn_salirActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    // consulta insert
    int respuesta = JOptionPane.showOptionDialog(null, "¿En que tabla quieres insertar?", "INSERTAR", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, IconoInsertar, opciones, opciones[0]);
        switch (respuesta) {
            //Alumno
            case 0:
                //iniciar Session
                SessionFactory alumno = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Alumnos.class).buildSessionFactory(); 
                Session session_alumno = alumno.openSession();
                //pedir valores y rellenar paréntesis
                String nombre_al = JOptionPane.showInputDialog("Introduce el NOMBRE del alumno:");
                String apellido_al = JOptionPane.showInputDialog("Introduce el APELLIDO del alumno:");
                String fecha_al = JOptionPane.showInputDialog("Introduce la FECHA DE NACIMIENTO del alumno:");
                int id_aula_al = Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID DEL AULA del alumno:"));
                Aula id_aula = new Aula(id_aula_al);
                Alumnos al = new Alumnos(nombre_al, apellido_al, fecha_al, id_aula);
                //realizar consulta
                session_alumno.beginTransaction();
                session_alumno.save(al);
                session_alumno.getTransaction().commit();
                lbl_resultado.setText("INSERCIÓN COMPLETA: "+al.toString());
                //cerrar Session
                session_alumno.close();
                break;
            //Asignatura
            case 1:
                //iniciar Session
                SessionFactory asignatura = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Asignaturas.class).buildSessionFactory();
                Session session_asignatura = asignatura.openSession();

                //pedir valores y rellenar paréntesis
                String nombre_as = JOptionPane.showInputDialog("Introduce el NOMBRE de la asignatura:");
                int prof_id_as = Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID DEL PROFESOR de la asignatura:"));
                Profesor p = new Profesor(prof_id_as);
                int mod_id_as = Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID DEL MODULO de la asignatura:"));
                Módulos m = new Módulos (mod_id_as);
                //realizar consulta
                Asignaturas asig = new Asignaturas(nombre_as, p, m);
                session_asignatura.beginTransaction();
                session_asignatura.save(asig);
                session_asignatura.getTransaction().commit();
                lbl_resultado.setText("INSERCIÓN COMPLETA: "+asig.toString());
                //cerrar Session
                session_asignatura.close();
                break;
            //Aula
            case 2:
                //iniciar Session
                SessionFactory aula = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Aula.class).buildSessionFactory();
                Session session_aula = aula.openSession();
                //pedir valores y rellenar paréntesis (valor unico AI, no pedir valores)
                Aula au = new Aula();
                //realizar consulta
                session_aula.beginTransaction();
                session_aula.save(au);
                session_aula.getTransaction().commit();
                lbl_resultado.setText("INSERCIÓN COMPLETA: "+au.toString());
                //cerrar Session
                session_aula.close();
                break;
            //Matriculas
            case 3:
                //iniciar Session
                SessionFactory matricula = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Matriculas.class).buildSessionFactory();
                Session session_matricula = matricula.openSession();
                //pedir valores y rellenar paréntesis
                int alu_id_mat = Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID DEL ALUMNO de la matricula:"));
                int mod_id_mat = Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID DEL MODULO de la matricula:"));
                Matriculas mat = new Matriculas(alu_id_mat, mod_id_mat);
                //realizar consulta
                session_matricula.beginTransaction();
                session_matricula.save(mat);
                session_matricula.getTransaction().commit();
                lbl_resultado.setText("INSERCIÓN COMPLETA: "+mat.toString());
                //cerrar Session
                session_matricula.close();
                break;
            //Modulos
            case 4:
                //iniciar Session
                SessionFactory modulo = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Módulos.class).buildSessionFactory();
                Session session_modulo = modulo.openSession();
                //pedir valores y rellenar paréntesis
                String nombre_mod = JOptionPane.showInputDialog("Introduce el NOMBRE del modulo:");
                Módulos mod = new Módulos(nombre_mod);
                //realizar consulta
                session_modulo.beginTransaction();
                session_modulo.save(mod);
                session_modulo.getTransaction().commit();
                lbl_resultado.setText("INSERCIÓN COMPLETA: "+mod.toString());
                //cerrar Session
                session_modulo.close();
                break;
            //Profesor
            case 5:
                //iniciar Session
                SessionFactory profesor = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Profesor.class).buildSessionFactory();
                Session session_profesor = profesor.openSession();
                //pedir valores y rellenar paréntesis
                String nombre_prof = JOptionPane.showInputDialog("Introduce el NOMBRE del profesor:");
                String tel_prof = JOptionPane.showInputDialog("Introduce el TELEFONO del profesor:");
                String direc_prof = JOptionPane.showInputDialog("Introduce la DIRECCION del profesor:");
                int salaprof_id_prof = Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID DE LA SALA DE PROFESORES del profesor:"));
                sala_profesores s = new sala_profesores(salaprof_id_prof);
                Profesor prof = new Profesor(nombre_prof, tel_prof, direc_prof, s);
                //realizar consulta
                session_profesor.beginTransaction();
                session_profesor.save(prof);
                session_profesor.getTransaction().commit();
                lbl_resultado.setText("INSERCIÓN COMPLETA: "+prof.toString());
                //cerrar Session
                session_profesor.close();
                break;
            //Taquillas
            case 6:
                //iniciar Session
                SessionFactory taquilla = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Taquillas.class).buildSessionFactory();
                Session session_taquilla = taquilla.openSession();
                //pedir valores y rellenar paréntesis
                int id_al_taq = Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID DEL ALUMNO de la taquilla:"));
                Taquillas taq = new Taquillas(id_al_taq);
                //realizar consulta
                session_taquilla.beginTransaction();
                session_taquilla.save(taq);
                session_taquilla.getTransaction().commit();
                lbl_resultado.setText("INSERCIÓN COMPLETA: "+taq.toString());//cerrar Session
                
                session_taquilla.close();
                break;
            //Sala profesores
            default:
                //iniciar Session
                SessionFactory sala_profesores = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(sala_profesores.class).buildSessionFactory();
                Session session_sala_profesores = sala_profesores.openSession();
                //pedir valores y rellenar paréntesis
                sala_profesores sala = new sala_profesores();
                //realizar consulta
                session_sala_profesores.beginTransaction();
                session_sala_profesores.save(sala);
                session_sala_profesores.getTransaction().commit();
                lbl_resultado.setText("INSERCIÓN COMPLETA: "+sala.toString());
                session_sala_profesores.close();
                break;
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // consulta update
        int respuesta = JOptionPane.showOptionDialog(null, "¿En que tabla quieres modificar?", "MODIFICAR", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, IconoInsertar, opciones, opciones[0]);
        switch (respuesta) {
            //Alumno
            case 0:
                SessionFactory alumno = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Alumnos.class).buildSessionFactory(); 
                Session session_alumno = alumno.openSession();
                //pedir valores y rellenar paréntesis
                int id_al = Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID del alumno a modificar:"));
                String nombre_al = JOptionPane.showInputDialog("Introduce el NOMBRE (nuevo) del alumno:");
                String apellido_al = JOptionPane.showInputDialog("Introduce el APELLIDO (nuevo) del alumno:");
                String fecha_al = JOptionPane.showInputDialog("Introduce la FECHA DE NACIMIENTO (nuevo) del alumno:");
                int id_aula_al = Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID DEL AULA (nuevo) del alumno:"));
                
                Aula id_aula = new Aula(id_aula_al);
               
                Alumnos al = new Alumnos(id_al,nombre_al, apellido_al, fecha_al, id_aula);
                session_alumno.beginTransaction();
                session_alumno.update(al);
                session_alumno.getTransaction().commit();
                lbl_resultado.setText("MODIFICACIÓN COMPLETA: " + al.toString());
                session_alumno.close();
                break;
            //Asignatura
            case 1:
                SessionFactory asignatura = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Asignaturas.class).buildSessionFactory();
                Session session_asignatura = asignatura.openSession();
                //pedir valores y rellenar paréntesis
                int id_as = Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID de la asignatura a modificar:"));
                String nombre_as = JOptionPane.showInputDialog("Introduce el NOMBRE (nuevo) de la asignatura:");
                int prof_id_as = Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID DEL PROFESOR (nuevo) de la asignatura:"));
                int mod_id_as = Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID DEL MODULO (nuevo) de la asignatura:"));
                
                Módulos m = new Módulos (mod_id_as);
                Profesor p = new Profesor(prof_id_as);
                
                Asignaturas asig = new Asignaturas(id_as, nombre_as, p, m);
                session_asignatura.beginTransaction();
                session_asignatura.update(asig);
                session_asignatura.getTransaction().commit();
                lbl_resultado.setText("MODIFICACIÓN COMPLETA: " + asig.toString());
                session_asignatura.close();
                break;
            //Aula
            case 2:
                SessionFactory aula = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Aula.class).buildSessionFactory();
                Session session_aula = aula.openSession();
                //Aula no se puede modificar, porque su único campo es Auto Increment
                lbl_resultado.setText("Aula no se puede modificar, porque su único campo es Auto Increment.");
                session_aula.close();
                break;
            //Matriculas
            case 3:
                SessionFactory matricula = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Matriculas.class).buildSessionFactory();
                Session session_matricula = matricula.openSession();
                //pedir valores y rellenar paréntesis
                int alu_id_mat = Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID DEL ALUMNO de la matricula a modificar:"));
                int mod_id_mat = Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID DEL MODULO (nuevo) de la matricula:"));
                Matriculas mat = new Matriculas(alu_id_mat, mod_id_mat);
                session_matricula.beginTransaction();
                session_matricula.update(mat);
                session_matricula.getTransaction().commit();
                lbl_resultado.setText("MODIFICACIÓN COMPLETA: " + mat.toString());
                session_matricula.close();
                break;
            //Modulos
            case 4:
                SessionFactory modulo = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Módulos.class).buildSessionFactory();
                Session session_modulo = modulo.openSession();
                //pedir valores y rellenar paréntesis
                int id_mod = Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID  del modulo a modificar:"));
                String nombre_mod = JOptionPane.showInputDialog("Introduce el NOMBRE (nuevo) del modulo:");
                Módulos mod = new Módulos(id_mod, nombre_mod);
                session_modulo.beginTransaction();
                session_modulo.update(mod);
                session_modulo.getTransaction().commit();
                lbl_resultado.setText("MODIFICACIÓN COMPLETA: " + mod.toString());
                session_modulo.close();
                break;
            //Profesor
            case 5:
                SessionFactory profesor = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Profesor.class).buildSessionFactory();
                Session session_profesor = profesor.openSession();
                //pedir valores y rellenar paréntesis
                int id_prof = Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID  del profesor a modificar:"));
                String nombre_prof = JOptionPane.showInputDialog("Introduce el NOMBRE (nuevo) del profesor:");
                String tel_prof = JOptionPane.showInputDialog("Introduce el TELEFONO (nuevo) del profesor:");
                String direc_prof = JOptionPane.showInputDialog("Introduce la DIRECCION (nuevo) del profesor:");
                int salaprof_id_prof = Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID DE LA SALA DE PROFESORES (nuevo) del profesor:"));
                
                sala_profesores s = new sala_profesores(salaprof_id_prof);
                
                Profesor prof = new Profesor(id_prof, nombre_prof, tel_prof, direc_prof, s);
                session_profesor.beginTransaction();
                session_profesor.update(prof);
                session_profesor.getTransaction().commit();
                lbl_resultado.setText("MODIFICACIÓN COMPLETA: " + prof.toString());
                session_profesor.close();
                break;
            //Taquillas
            case 6:
                SessionFactory taquilla = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Taquillas.class).buildSessionFactory();
                Session session_taquilla = taquilla.openSession();
                //pedir valores y rellenar paréntesis
                int id_taq = Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID de la taquilla a modificar:"));
                int id_al_taq = Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID DEL ALUMNO (nuevo) de la taquilla:"));
                
                Alumnos a=new Alumnos (id_al_taq);
                
                Taquillas taq = new Taquillas(id_taq, a);
                session_taquilla.beginTransaction();
                session_taquilla.update(taq);
                session_taquilla.getTransaction().commit();
                lbl_resultado.setText("MODIFICACIÓN COMPLETA: " + taq.toString());
                session_taquilla.close();
                break;
            //Sala profesores
            default:
                SessionFactory sala_profesores = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(sala_profesores.class).buildSessionFactory();
                Session session_sala_profesores = sala_profesores.openSession();
                //Sala de profesores no se puede modificar, porque su único campo es Auto Increment
                lbl_resultado.setText("Sala de profesores no se puede modificar, porque su único campo es Auto Increment.");
                session_sala_profesores.close();
                break;
        }        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // consulta select + where
        int respuesta = JOptionPane.showOptionDialog(null, "¿En que tabla quieres consultar?", "CONSULTAR", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, IconoInsertar, opciones, opciones[0]);
        
        switch (respuesta) {
            //Alumno
            case 0:
                SessionFactory alumno = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Alumnos.class).buildSessionFactory(); 
                Session session_alumno = alumno.openSession();
                
                //pedir columna de consulta
                Object[] columnas_al = {"id", "nombre", "apellido","fecha_nacimiento","id_Aula"};
                int col_al = JOptionPane.showOptionDialog(null, "¿Qué columna eliges?", "COLUMNA", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, IconoInsertar, columnas_al, columnas_al[0]);
                switch (col_al) {
                    //id
                    case 0:
                        int id_al= Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID de busqueda:"));
                        hql = "FROM Alumnos WHERE id =:id "; 
                        c_al = session_alumno.createQuery(hql,Alumnos.class); 
                        c_al.setParameter("id",id_al);
                        break;
                    //nombre
                    case 1:
                        String nom_al= JOptionPane.showInputDialog("Introduce el NOMBRE de busqueda:");
                        hql = "FROM Alumnos WHERE nombre =: nombre"; 
                        c_al = session_alumno.createQuery(hql,Alumnos.class); 
                        c_al.setParameter("nombre",nom_al);
                        break;
                    //apellido
                    case 2:
                        String ap_al= JOptionPane.showInputDialog("Introduce el APELLIDO de busqueda:");
                        hql = "FROM Alumnos WHERE apellido =: apellido"; 
                        c_al = session_alumno.createQuery(hql,Alumnos.class); 
                        c_al.setParameter("apellido",ap_al);
                        break;
                    //fecha_nacimiento
                    case 3:
                        String fecha_al= JOptionPane.showInputDialog("Introduce la FECHA DE NACIMIENTO de busqueda:");
                        hql = "FROM Alumnos WHERE fecha_nacimiento =: apellido"; 
                        c_al = session_alumno.createQuery(hql,Alumnos.class); 
                        c_al.setParameter("fecha_nacimiento",fecha_al);
                        break;
                    //id_aula
                    default:
                        int id_aula_al= Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID DEL AULA de busqueda:"));
                        hql = "FROM Alumnos WHERE id_Aula =: id_Aula"; 
                        c_al = session_alumno.createQuery(hql,Alumnos.class); 
                        c_al.setParameter("id_Aula",id_aula_al);
                        break;
                }
                                
                List<Alumnos> res_al = c_al.getResultList();
                for(Alumnos res : res_al){
                    lbl_resultado.setText(res.toString());
                }
                session_alumno.close();
                break;

            //Asignatura
            case 1:
                SessionFactory asignatura = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Asignaturas.class).buildSessionFactory();
                Session session_asignatura = asignatura.openSession();
                
                //pedir columna de consulta
                Object[] columnas_as = {"id", "Nombre", "ProfesorID","ModulosID"};
                int col_as = JOptionPane.showOptionDialog(null, "¿Qué columna eliges?", "COLUMNA", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, IconoInsertar, columnas_as, columnas_as[0]);
                switch (col_as) {
                    //id
                    case 0:
                        int id_as= Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID de busqueda:"));
                        hql = "FROM Asignaturas WHERE id =:id "; 
                        c_as = session_asignatura.createQuery(hql,Asignaturas.class); 
                        c_as.setParameter("id",id_as);
                        break;
                    //Nombre
                    case 1:
                        String nom_as= JOptionPane.showInputDialog("Introduce el NOMBRE de busqueda:");
                        hql = "FROM Asignaturas WHERE Nombre =: Nombre"; 
                        c_as = session_asignatura.createQuery(hql,Asignaturas.class); 
                        c_as.setParameter("Nombre",nom_as);
                        break;
                    //ProfesorID
                    case 2:
                        String prof_id_as= JOptionPane.showInputDialog("Introduce el ID DEL PROFESOR de busqueda:");
                        hql = "FROM Asignaturas WHERE ProfesorID =: ProfesorID"; 
                        c_as = session_asignatura.createQuery(hql,Asignaturas.class); 
                        c_as.setParameter("ProfesorID",prof_id_as);
                        break;
                    //ModulosID
                    default:
                        int mod_id_as= Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID DEL MODULO de busqueda:"));
                        hql = "FROM Asignaturas WHERE ModulosID =: ModulosID"; 
                        c_as = session_asignatura.createQuery(hql,Asignaturas.class); 
                        c_as.setParameter("ModulosID",mod_id_as);
                        break;
                }
                                
                List<Asignaturas> res_as = c_as.getResultList();
                for(Asignaturas res : res_as){
                    lbl_resultado.setText(res.toString());
                }
                
                session_asignatura.close();
                break;
            //Aula
            case 2:
                SessionFactory aula = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Aula.class).buildSessionFactory();
                Session session_aula = aula.openSession();
                
                //pedir columna de consulta (en este caso solo hay 1 columna)
                int id_au= Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID de busqueda:"));
                hql = "FROM Aula WHERE id =:id "; 
                c_au = session_aula.createQuery(hql,Aula.class); 
                c_au.setParameter("id",id_au);
                Aula aula1 = c_au.getSingleResult();
                lbl_resultado.setText(aula1.toString());
                
                session_aula.close();
                break;
            //Matriculas
            case 3:
                SessionFactory matricula = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Matriculas.class).buildSessionFactory();
                Session session_matricula = matricula.openSession();
                
                //pedir columna de consulta
                Object[] columnas_mat = {"AlumnosID", "ModulosID"};
                int col_mat = JOptionPane.showOptionDialog(null, "¿Qué columna eliges?", "COLUMNA", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, IconoInsertar, columnas_mat, columnas_mat[0]);
                switch (col_mat) {
                    //AlumnosID
                    case 0:
                        int id_alu_mat= Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID DE ALUMNO de busqueda:"));
                        hql = "FROM Matriculas WHERE AlumnosID =: AlumnosID"; 
                        c_mat = session_matricula.createQuery(hql,Matriculas.class); 
                        c_mat.setParameter("AlumnosID",id_alu_mat);
                        break;
                    //ModulosID
                    default:
                        int id_mod_mat= Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID DE MODULO de busqueda:"));
                        hql = "FROM Matriculas WHERE ModulosID =: ModulosID"; 
                        c_mat = session_matricula.createQuery(hql,Matriculas.class); 
                        c_mat.setParameter("ModulosID",id_mod_mat);
                        break;
                }
                                
                List<Matriculas> res_mat = c_mat.getResultList();
                for(Matriculas res : res_mat){
                    lbl_resultado.setText(res.toString());
                }
                
                session_matricula.close();
                break;
            //Módulos
            case 4:
                SessionFactory modulo = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Módulos.class).buildSessionFactory();
                Session session_modulo = modulo.openSession();
                
                //pedir columna de consulta
                Object[] columnas_mod = {"id", "nombre"};
                int col_mod = JOptionPane.showOptionDialog(null, "¿Qué columna eliges?", "COLUMNA", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, IconoInsertar, columnas_mod, columnas_mod[0]);
                switch (col_mod) {
                    //id
                    case 0:
                        int id_mod= Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID de busqueda:"));
                        hql = "FROM Módulos WHERE id =: id"; 
                        c_mod = session_modulo.createQuery(hql,Módulos.class); 
                        c_mod.setParameter("id",id_mod);
                        break;
                    //nombre
                    default:
                        String nom_mod= JOptionPane.showInputDialog("Introduce el ID DE MODULO de busqueda:");
                        hql = "FROM Módulos WHERE nombre =: nombre"; 
                        c_mod = session_modulo.createQuery(hql,Módulos.class); 
                        c_mod.setParameter("nombre",nom_mod);
                        break;
                }
                                
                List<Módulos> res_mod = c_mod.getResultList();
                for(Módulos res : res_mod){
                    lbl_resultado.setText(res.toString());
                }
                
                session_modulo.close();
                break;
            //Profesor
            case 5:
                SessionFactory profesor = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Profesor.class).buildSessionFactory();
                Session session_profesor = profesor.openSession();
                
                //pedir columna de consulta
                Object[] columnas_prof = {"id", "Nombre", "Telefono","Direccion","sala_profesores_id"};
                int col_prof = JOptionPane.showOptionDialog(null, "¿Qué columna eliges?", "COLUMNA", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, IconoInsertar, columnas_prof, columnas_prof[0]);
                switch (col_prof) {
                    //id
                    case 0:
                        int id_prof= Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID de busqueda:"));
                        hql = "FROM Profesor WHERE id =:id "; 
                        c_prof = session_profesor.createQuery(hql,Profesor.class); 
                        c_prof.setParameter("id",id_prof);
                        break;
                    //Nombre
                    case 1:
                        String nom_prof= JOptionPane.showInputDialog("Introduce el NOMBRE de busqueda:");
                        hql = "FROM Profesor WHERE Nombre =:Nombre "; 
                        c_prof = session_profesor.createQuery(hql,Profesor.class); 
                        c_prof.setParameter("Nombre",nom_prof);
                        break;
                    //Telefono
                    case 2:
                        String tel_prof= JOptionPane.showInputDialog("Introduce el TELEFONO de busqueda:");
                        hql = "FROM Profesor WHERE Telefono =:Telefono "; 
                        c_prof = session_profesor.createQuery(hql,Profesor.class); 
                        c_prof.setParameter("Telefono",tel_prof);
                        break;
                    //Direccion
                    case 3:
                        String dir_prof= JOptionPane.showInputDialog("Introduce el ID de busqueda:");
                        hql = "FROM Profesor WHERE Direccion =:Direccion "; 
                        c_prof = session_profesor.createQuery(hql,Profesor.class); 
                        c_prof.setParameter("Direccion",dir_prof);
                        break;
                    //sala_profesores_id
                    default:
                        int sala_prof= Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID DE SALA DE PROFESOR de busqueda:"));
                        hql = "FROM Profesor WHERE sala_profesores_id =:sala_profesores_id "; 
                        c_prof = session_profesor.createQuery(hql,Profesor.class); 
                        c_prof.setParameter("sala_profesores_id",sala_prof);
                        break;
                }
                                
                List<Profesor> res_prof = c_prof.getResultList();
                for(Profesor res : res_prof){
                    lbl_resultado.setText(res.toString());
                }
                
                session_profesor.close();
                break;
            //Taquillas
            case 6:
                SessionFactory taquilla = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Taquillas.class).buildSessionFactory();
                Session session_taquilla = taquilla.openSession();
                
                //pedir columna de consulta
                Object[] columnas_taq = {"id", "AlumnosID"};
                int col_taq = JOptionPane.showOptionDialog(null, "¿Qué columna eliges?", "COLUMNA", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, IconoInsertar, columnas_taq, columnas_taq[0]);
                switch (col_taq) {
                    //id
                    case 0:
                        int id_taq= Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID de busqueda:"));
                        hql = "FROM Taquillas WHERE id =: id"; 
                        c_taq = session_taquilla.createQuery(hql,Taquillas.class); 
                        c_taq.setParameter("id",id_taq);
                        break;
                    //AlumnosID
                    default:
                        int id_al_taq= Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID DE ALUMNO de busqueda:"));
                        hql = "FROM Taquillas WHERE AlumnosID =: AlumnosID"; 
                        c_taq = session_taquilla.createQuery(hql,Taquillas.class); 
                        c_taq.setParameter("AlumnosID",id_al_taq);
                        break;
                }
                                
                List<Taquillas> res_taq = c_taq.getResultList();
                for(Taquillas res : res_taq){
                    lbl_resultado.setText(res.toString());
                }
                
                session_taquilla.close();
                break;
            //sala_profesores
            default:
                SessionFactory sala_profesores = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(sala_profesores.class).buildSessionFactory();
                Session session_sala_profesores = sala_profesores.openSession();
                
                //pedir columna de consulta (en este caso solo hay 1 columna)
                int id_sala= Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID de busqueda:"));
                hql = "FROM sala_profesores WHERE id =:id "; 
                c_sala = session_sala_profesores.createQuery(hql,sala_profesores.class); 
                c_sala.setParameter("id",id_sala);
                sala_profesores sala1 = c_sala.getSingleResult();
                lbl_resultado.setText(sala1.toString());
                
                session_sala_profesores.close();
                break;
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // consulta delete
        int respuesta = JOptionPane.showOptionDialog(null, "¿En que tabla quieres eliminar?", "ELIMINAR", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, IconoInsertar, opciones, opciones[0]);
        switch (respuesta) {
            //Alumno
            case 0:
                SessionFactory alumno = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Alumnos.class).buildSessionFactory(); 
                Session session_alumno = alumno.openSession();
                //pedir valores y rellenar paréntesis
                int id_al = Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID del alumno a eliminar:"));
                Alumnos al = new Alumnos(id_al);
                session_alumno.beginTransaction();
                session_alumno.delete(al);
                session_alumno.getTransaction().commit();
                lbl_resultado.setText("ELIMINACIÓN COMPLETA: " + al.toString());
                break;
            //Asignatura
            case 1:
                SessionFactory asignatura = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Asignaturas.class).buildSessionFactory();
                Session session_asignatura = asignatura.openSession();
                //pedir valores y rellenar paréntesis
                int id_as = Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID de la asignatura a eliminar:"));
/*                Asignaturas asig = new Asignaturas(id_as);
                session_asignatura.beginTransaction();
                session_asignatura.delete(asig);
                session_asignatura.getTransaction().commit();
                lbl_resultado.setText("ELIMINACIÓN COMPLETA: " + asig.toString());*/
                session_asignatura.close();
                break;
            //Aula
            case 2:
                SessionFactory aula = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Aula.class).buildSessionFactory();
                Session session_aula = aula.openSession();
                //pedir valores y rellenar paréntesis
                int id_au = Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID del aula a eliminar:"));
                Aula au = new Aula(id_au);
                session_aula.beginTransaction();
                session_aula.delete(au);
                session_aula.getTransaction().commit();
                lbl_resultado.setText("ELIMINACIÓN COMPLETA: " + au.toString());
                session_aula.close();
                break;
            //Matriculas
            case 3:
                SessionFactory matricula = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Matriculas.class).buildSessionFactory();
                Session session_matricula = matricula.openSession();
                //pedir valores y rellenar paréntesis
                int alu_id_mat = Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID DEL ALUMNO de la matricula a eliminar:"));
                Matriculas mat = new Matriculas(alu_id_mat);
                session_matricula.beginTransaction();
                session_matricula.delete(mat);
                session_matricula.getTransaction().commit();
                lbl_resultado.setText("ELIMINACIÓN COMPLETA: " + mat.toString());
                session_matricula.close();
                break;
            //Modulos
            case 4:
                SessionFactory modulo = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Módulos.class).buildSessionFactory();
                Session session_modulo = modulo.openSession();
                //pedir valores y rellenar paréntesis
                int id_mod = Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID  del modulo a modificar:"));
                Módulos mod = new Módulos(id_mod);
                session_modulo.beginTransaction();
                session_modulo.delete(mod);
                session_modulo.getTransaction().commit();
                lbl_resultado.setText("ELIMINACIÓN COMPLETA: " + mod.toString());
                session_modulo.close();
                break;
            //Profesor
            case 5:
                SessionFactory profesor = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Profesor.class).buildSessionFactory();
                Session session_profesor = profesor.openSession();
                //pedir valores y rellenar paréntesis
                int id_prof = Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID  del profesor a eliminar:"));
                Profesor prof = new Profesor(id_prof);
                session_profesor.beginTransaction();
                session_profesor.delete(prof);
                session_profesor.getTransaction().commit();
                lbl_resultado.setText("ELIMINACIÓN COMPLETA: " + prof.toString());
                session_profesor.close();
                break;
            //Taquillas
            case 6:
                SessionFactory taquilla = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(Taquillas.class).buildSessionFactory();
                Session session_taquilla = taquilla.openSession();
                //pedir valores y rellenar paréntesis
                int id_taq = Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID de la taquilla a eliminar:"));
                Taquillas taq = new Taquillas(id_taq);
                session_taquilla.beginTransaction();
                session_taquilla.delete(taq);
                session_taquilla.getTransaction().commit();
                lbl_resultado.setText("ELIMINACIÓN COMPLETA: " + taq.toString());
                session_taquilla.close();
                break;
            //Sala profesores
            default:
                SessionFactory sala_profesores = (SessionFactory) new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(sala_profesores.class).buildSessionFactory();
                Session session_sala_profesores = sala_profesores.openSession();
                //pedir valores y rellenar paréntesis
                int id_sala_prof = Integer.parseInt(JOptionPane.showInputDialog("Introduce el ID de la sala de profesores a eliminar:"));
                sala_profesores sala = new sala_profesores(id_sala_prof);
                session_sala_profesores.beginTransaction();
                session_sala_profesores.delete(sala);
                session_sala_profesores.getTransaction().commit();
                lbl_resultado.setText("ELIMINACIÓN COMPLETA: " + sala.toString());
                session_sala_profesores.close();
                break;
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazHibernate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazHibernate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazHibernate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazHibernate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazHibernate().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_salir;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel lbl_resultado;
    // End of variables declaration//GEN-END:variables
}